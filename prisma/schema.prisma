generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String        @id
    username     String        @unique @db.VarChar(255)
    firstName    String?
    lastName     String?
    imageUrl     String?
    posts        Post[]
    comments     Comment[]
    postVotes    PostVote[]
    commentVotes CommentVote[]
}

model Post {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title     String   @db.VarChar(255)
    content   String   @db.Text
    authorId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    comments Comment[]
    votes    PostVote[]

    @@index([authorId])
    @@index([updatedAt])
}

model Comment {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    content   String   @db.Text
    authorId  String
    postId    String   @db.Uuid
    replyToId String?  @db.Uuid
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author  User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
    post    Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    replyTo Comment?      @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: SetNull)
    replies Comment[]     @relation("CommentReplies")
    votes   CommentVote[]

    @@index([authorId])
    @@index([postId])
    @@index([replyToId])
}

model PostVote {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId    String
    postId    String   @db.Uuid
    value     Int      @db.SmallInt
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@index([userId])
    @@index([postId])
}

model CommentVote {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId    String
    commentId String   @db.Uuid
    value     Int      @db.SmallInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
    @@index([userId])
    @@index([commentId])
}
